service: backend
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:GetItem'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
            - 'dynamodb:BatchGetItem'
            - 'dynamodb:BatchWriteItem'
            - 'dynamodb:Query'
          Resource:
            - '*'

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

functions:
  # local dev endpoints
  hello:
    handler: src/handlers/hello.world
    events:
      - http:
          method: get
          path: hello
  dbInit:
    handler: src/handlers/db.init
  dbDrop:
    handler: src/handlers/db.drop

  # Folder endpoints
  getFolder:
    handler: src/handlers/folder.getFolder
    events:
      - http:
          method: get
          path: /api/v1/folder
  newFolder:
    handler: src/handlers/folder.newFolder
    events:
      - http:
          method: post
          path: /api/v1/folder
  updateFolder:
    handler: src/handlers/folder.updateFolder
    events:
      - http:
          method: put
          path: /api/v1/folder
  deleteFolder:
    handler: src/handlers/folder.deleteFolder
    events:
      - http:
          method: delete
          path: /api/v1/folder

  # Collection endpoints
  getCollection:
    handler: src/handlers/collection.get
    events:
      - http:
          method: get
          path: /api/v1/collection
  createCollection:
    handler: src/handlers/collection.create
    events:
      - http:
          method: post
          path: /api/v1/collection
  updateCollection:
    handler: src/handlers/collection.update
    events:
      - http:
          method: put
          path: /api/v1/collection
  deleteCollection:
    handler: src/handlers/collection.remove
    events:
      - http:
          method: delete
          path: /api/v1/collection

  # Question endpoints
  getQuestion:
    handler: src/handlers/question.get
    events:
      - http:
          method: get
          path: /api/v1/question
  createQuestion:
    handler: src/handlers/question.create
    events:
      - http:
          method: post
          path: /api/v1/question
  updateQuestion:
    handler: src/handlers/question.update
    events:
      - http:
          method: put
          path: /api/v1/question
  deleteQuestion:
    handler: src/handlers/question.remove
    events:
      - http:
          method: delete
          path: /api/v1/question

  # Question Option endpoints
  createQuestionOption:
    handler: src/handlers/question_option.create
    events:
      - http:
          method: post
          path: /api/v1/question_option
  updateQuestionOption:
    handler: src/handlers/question_option.update
    events:
      - http:
          method: put
          path: /api/v1/question_option
  deleteQuestionOption:
    handler: src/handlers/question_option.remove
    events:
      - http:
          method: delete
          path: /api/v1/question_option

  # Question User Response endpoints
  createQuestionUserResponse:
    handler: src/handlers/question_user_response.create
    events:
      - http:
          method: post
          path: /api/v1/question_user_response
  deleteQuestionUserResponse:
    handler: src/handlers/question_user_response.remove
    events:
      - http:
          method: delete
          path: /api/v1/question_user_response

  #
  # Auth
  #
  mobileAuthRedirect:
    handler: src/handlers/auth/mobile.redirect
    timeout: 10
    events:
      - http:
          method: get
          path: api/v1/auth/mobile/redirect
          cors: true
  mobileAuthURL:
    handler: src/handlers/auth/mobile.url
    timeout: 10
    events:
      - http:
          method: get
          path: api/v1/auth/mobile/url
          cors: true
  ltiLaunch:
    handler: src/handlers/auth/lti.launch
    timeout: 10
    events:
      - http:
          path: /api/v1/auth/lti
          method: post
          cors: true

  # websocket endpoints
  connect:
    handler: src/handlers/websocket/connect.handler
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: src/handlers/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
  join:
    handler: src/handlers/websocket/join.handler
    events:
      - websocket:
          route: join
  leave:
    handler: src/handlers/websocket/leave.handler
    events:
      - websocket:
          route: leave
  createRoom:
    handler: src/handlers/websocket/createRoom.handler
    events:
      - websocket:
          route: createRoom
  closeRoom:
    handler: src/handlers/websocket/closeRoom.handler
    events:
      - websocket:
          route: closeRoom
  submit:
    handler: src/handlers/websocket/submit.handler
    events:
      - websocket:
          route: submit
  startQuestion:
    handler: src/handlers/websocket/startQuestion.handler
    events:
      - websocket:
          route: startQuestion
  endQuestion:
    handler: src/handlers/websocket/endQuestion.handler
    events:
      - websocket:
          route: endQuestion

resources:
  Resources:
    connectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Connections
        AttributeDefinitions:
          - AttributeName: courseId
            AttributeType: S
          - AttributeName: professor
            AttributeType: S
        KeySchema:
          - AttributeName: courseId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          IndexName: ProfessorIndex
          KeySchema:
            - AttributeName: professor
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
