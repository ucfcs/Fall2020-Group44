service: backend

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:GetItem'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
            - 'dynamodb:BatchGetItem'
            - 'dynamodb:BatchWriteItem'
            - 'dynamodb:Query'
          Resource:
            - '*'

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

functions:
  #
  # local dev endpoints
  #
  hello:
    handler: src/handlers/hello.world
    events:
      - http:
          method: get
          path: hello
  mockLtiLaunch:
    handler: src/handlers/mock.launch
    events:
      - http:
          method: get
          path: mock_launch

  #
  # script functions
  #
  dbInit:
    handler: src/handlers/db/index.init
  dbDrop:
    handler: src/handlers/db/index.drop

  #
  # Authorizer functions
  #
  tokenAuthorizer:
    handler: src/handlers/auth/authorizer.tokenAuthorizer

  #
  # Course endpoints
  #
  getCourse:
    handler: src/handlers/course.getCourse
    events:
      - http:
          method: get
          path: /api/v1/courses/{courseId}
          authorizer: tokenAuthorizer

  #
  # Grade endpoints
  #
  getSessionsGrades:
    handler: src/handlers/grade.getSessionsGrades
    events:
      - http:
          method: get
          path: /api/v1/courses/{courseId}/grades
          authorizer: tokenAuthorizer
  getQuestionsGrades:
    handler: src/handlers/grade.getQuestionsGrades
    events:
      - http:
          method: get
          path: /api/v1/courses/{courseId}/session/{sessionId}/grades
          authorizer: tokenAuthorizer
  exportGrades:
    handler: src/handlers/grade.exportGrades
    events:
      - http:
          method: post
          path: /api/v1/courses/{courseId}/grades_export
          authorizer: tokenAuthorizer


  #
  # Folder endpoints
  #
  getFolder:
    handler: src/handlers/folder.get
    events:
      - http:
          method: get
          path: /api/v1/folder/{folderId}
          authorizer: tokenAuthorizer
  newFolder:
    handler: src/handlers/folder.create
    events:
      - http:
          method: post
          path: /api/v1/folder
          authorizer: tokenAuthorizer
  updateFolder:
    handler: src/handlers/folder.update
    events:
      - http:
          method: put
          path: /api/v1/folder/{folderId}
          authorizer: tokenAuthorizer
  deleteFolder:
    handler: src/handlers/folder.remove
    events:
      - http:
          method: delete
          path: /api/v1/folder/{folderId}
          authorizer: tokenAuthorizer

  #
  # Session endpoints
  #
  getSession:
    handler: src/handlers/session.get
    events:
      - http:
          method: get
          path: /api/v1/session/{sessionId}
          authorizer: tokenAuthorizer
  createSession:
    handler: src/handlers/session.create
    events:
      - http:
          method: post
          path: /api/v1/session
          authorizer: tokenAuthorizer

  #
  # Question endpoints
  #
  getQuestion:
    handler: src/handlers/question.get
    events:
      - http:
          method: get
          path: /api/v1/question/{questionId}
          authorizer: tokenAuthorizer
  createQuestion:
    handler: src/handlers/question.create
    events:
      - http:
          method: post
          path: /api/v1/question
          authorizer: tokenAuthorizer
  updateQuestion:
    handler: src/handlers/question.update
    events:
      - http:
          method: put
          path: /api/v1/question/{questionId}
          authorizer: tokenAuthorizer
  deleteQuestion:
    handler: src/handlers/question.remove
    events:
      - http:
          method: delete
          path: /api/v1/question/{questionId}
          authorizer: tokenAuthorizer

  #
  # Question Option endpoints
  #
  createQuestionOption:
    handler: src/handlers/question_option.create
    events:
      - http:
          method: post
          path: /api/v1/question/{questionId}/option
          authorizer: tokenAuthorizer
  updateQuestionOption:
    handler: src/handlers/question_option.update
    events:
      - http:
          method: put
          path: /api/v1/question/{questionId}/option/{optionId}
          authorizer: tokenAuthorizer
  deleteQuestionOption:
    handler: src/handlers/question_option.remove
    events:
      - http:
          method: delete
          path: /api/v1/question/{questionId}/option/{optionId}
          authorizer: tokenAuthorizer

  #
  # Question User Response endpoints
  #
  createQuestionUserResponse:
    handler: src/handlers/question_user_response.create
    events:
      - http:
          method: post
          path: /api/v1/question/{questionId}/response
          authorizer: tokenAuthorizer
  deleteQuestionUserResponse:
    handler: src/handlers/question_user_response.remove
    events:
      - http:
          method: delete
          path: /api/v1/question/{questionId}/response
          authorizer: tokenAuthorizer
  updateQuestionUserResponse:
    handler: src/handlers/question_user_response.update
    events:
      - http:
          method: put
          path: /api/v1/question/{questionId}/response
          authorizer: tokenAuthorizer
  getQuestionUserResponse:
    handler: src/handlers/question_user_response.get
    events:
      - http:
          method: get
          path: /api/v1/question/{questionId}/response
          authorizer: tokenAuthorizer

  #
  # Auth
  #
  redirect:
    handler: src/handlers/auth/redirect.handler
    timeout: 10
    events:
      - http:
          method: get
          path: api/v1/auth/redirect
          cors: true
  mobileAuthRedirect:
    handler: src/handlers/auth/mobile.redirect
    timeout: 10
    events:
      - http:
          method: get
          path: api/v1/auth/mobile/redirect
          cors: true
  mobileAuthURL:
    handler: src/handlers/auth/mobile.url
    timeout: 10
    events:
      - http:
          method: get
          path: api/v1/auth/mobile/url
          cors: true
  mobileAuthRevoke:
    handler: src/handlers/auth/mobile.revoke
    timeout: 10
    events:
      - http:
          method: delete
          path: api/v1/auth/mobile/revoke
          cors: true
  ltiLaunch:
    handler: src/handlers/auth/lti.launch
    timeout: 10
    events:
      - http:
          path: /api/v1/auth/lti
          method: post
          cors: true
  ltiRedirect:
    handler: src/handlers/auth/lti.redirect
    timeout: 10
    events:
      - http:
          path: /api/v1/auth/lti/redirect
          method: get
          cors: true

  # Step 2: Authentication Request
  login:
    handler: src/handlers/auth/lti.login
    timeout: 10
    events:
      - http:
          path: /api/v1/auth/lti13/login
          method: post
          cors: true
      - http:
          path: /api/v1/auth/lti13/login
          method: get
          cors: true
  # Step 4: Resource Display
  lti13:
    handler: src/handlers/auth/lti.lti13
    timeout: 10
    events:
      - http:
          path: /api/v1/auth/lti13/launch
          method: post
          cors: true
      - http:
          path: /api/v1/auth/lti13/launch
          method: get
          cors: true

  #
  # Canvas Proxy
  #
  canvasProxy:
    handler: src/handlers/canvasProxy.handler
    events:
      - http:
          path: /api/v1/proxy/canvas
          method: post
          cors: true

  #
  # User Settings
  #
  getUserSetting:
    handler: src/handlers/user.getUserSetting
    events:
      - http:
          path: /api/v1/user/setting
          method: get
          cors: true
          authorizer: tokenAuthorizer
  setUserSetting:
    handler: src/handlers/user.setUserSetting
    events:
      - http:
          path: /api/v1/user/setting
          method: put
          cors: true
          authorizer: tokenAuthorizer

  #
  # websocket endpoints
  #
  connect:
    handler: src/handlers/websocket/connect.handler
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: src/handlers/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
  studentJoinRoom:
    handler: src/handlers/websocket/joinRoom.student
    events:
      - websocket:
          route: studentJoinRoom
  professorJoinRoom:
    handler: src/handlers/websocket/joinRoom.professor
    events:
      - websocket:
          route: professorJoinRoom
  leaveRoom:
    handler: src/handlers/websocket/leaveRoom.handler
    events:
      - websocket:
          route: leaveRoom
  closeRoom:
    handler: src/handlers/websocket/closeRoom.handler
    events:
      - websocket:
          route: closeRoom
  startSession:
    handler: src/handlers/websocket/session.start
    events:
      - websocket:
          route: startSession
  endSession:
    handler: src/handlers/websocket/session.end
    events:
      - websocket:
          route: endSession
  joinSession:
    handler: src/handlers/websocket/session.join
    events:
      - websocket:
          route: joinSession
  leaveSession:
    handler: src/handlers/websocket/session.leave
    events:
      - websocket:
          route: leaveSession
  submit:
    handler: src/handlers/websocket/submit.handler
    events:
      - websocket:
          route: submit
  startQuestion:
    handler: src/handlers/websocket/startQuestion.handler
    events:
      - websocket:
          route: startQuestion
  endQuestion:
    handler: src/handlers/websocket/endQuestion.handler
    events:
      - websocket:
          route: endQuestion

resources:
  Resources:
    connectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Connections
        AttributeDefinitions:
          - AttributeName: courseId
            AttributeType: S
          - AttributeName: professor
            AttributeType: S
        KeySchema:
          - AttributeName: courseId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          IndexName: ProfessorIndex
          KeySchema:
            - AttributeName: professor
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
