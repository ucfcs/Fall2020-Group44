# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: backend
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'dynamodb:PutItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:BatchGetItem'
        - 'dynamodb:BatchWriteItem'
        - 'dynamodb:Query'
      Resource:
        - '*'

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: src/handlers/handler.hello
    events:
      - http:
          method: get
          path: hello
  dbInit:
    handler: src/handlers/db.init
  dbDrop:
    handler: src/handlers/db.drop

  ltiLaunch:
    handler: src/lti.launch
    timeout: 10
    events:
      - http:
          path: '/api/v1/lti'
          method: post
          cors: true

  # Folder endpoints
  getFolder:
    handler: src/handlers/folder.getFolder
    events:
      - http:
          method: get
          path: /api/v1/folder
  newFolder:
    handler: src/handlers/folder.newFolder
    events:
      - http:
          method: post
          path: /api/v1/folder
  updateFolder:
    handler: src/handlers/folder.updateFolder
    events:
      - http:
          method: put
          path: /api/v1/folder
  deleteFolder:
    handler: src/handlers/folder.deleteFolder
    events:
      - http:
          method: delete
          path: /api/v1/folder

  # Collection endpoints
  getCollection:
    handler: src/handlers/collection.get
    events:
      - http:
          method: get
          path: /api/v1/collection
  createCollection:
    handler: src/handlers/collection.create
    events:
      - http:
          method: post
          path: /api/v1/collection
  updateCollection:
    handler: src/handlers/collection.update
    events:
      - http:
          method: put
          path: /api/v1/collection
  deleteCollection:
    handler: src/handlers/collection.remove
    events:
      - http:
          method: delete
          path: /api/v1/collection

  # Question endpoints
  getQuestion:
    handler: src/handlers/question.get
    events:
      - http:
          method: get
          path: /api/v1/question
  createQuestion:
    handler: src/handlers/question.create
    events:
      - http:
          method: post
          path: /api/v1/question
  updateQuestion:
    handler: src/handlers/question.update
    events:
      - http:
          method: put
          path: /api/v1/question
  deleteQuestion:
    handler: src/handlers/question.remove
    events:
      - http:
          method: delete
          path: /api/v1/question

  # Question Option endpoints
  createQuestionOption:
    handler: src/handlers/question_option.create
    events:
      - http:
          method: post
          path: /api/v1/question_option
  updateQuestionOption:
    handler: src/handlers/question_option.update
    events:
      - http:
          method: put
          path: /api/v1/question_option
  deleteQuestionOption:
    handler: src/handlers/question_option.remove
    events:
      - http:
          method: delete
          path: /api/v1/question_option

  # Question User Response endpoints
  createQuestionUserResponse:
    handler: src/handlers/question_user_response.create
    events:
      - http:
          method: post
          path: /api/v1/question_user_response
  deleteQuestionUserResponse:
    handler: src/handlers/question_user_response.remove
    events:
      - http:
          method: delete
          path: /api/v1/question_user_response

  # websocket endpoints
  connect:
    handler: src/handlers/websocket/connect.handler
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: src/handlers/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
  join:
    handler: src/handlers/websocket/join.handler
    events:
      - websocket:
          route: join
  leave:
    handler: src/handlers/websocket/leave.handler
    events:
      - websocket:
          route: leave
  createRoom:
    handler: src/handlers/websocket/createRoom.handler
    events:
      - websocket:
          route: createRoom
  closeRoom:
    handler: src/handlers/websocket/closeRoom.handler
    events:
      - websocket:
          route: closeRoom
  submit:
    handler: src/handlers/websocket/submit.handler
    events:
      - websocket:
          route: submit
  startQuestion:
    handler: src/handlers/websocket/startQuestion.handler
    events:
      - websocket:
          route: startQuestion
  endQuestion:
    handler: src/handlers/websocket/endQuestion.handler
    events:
      - websocket:
          route: endQuestion
          path: /api/v1/folder

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: hello
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/awebsocket/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    connectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Connections
        AttributeDefinitions:
          - AttributeName: courseId
            AttributeType: S
          - AttributeName: professor
            AttributeType: S
        KeySchema:
          - AttributeName: courseId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          IndexName: ProfessorIndex
          KeySchema:
            - AttributeName: professor
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
